c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      include 'budgets.usr'
      include 'wall.usr'
      include 'scatter.usr'
c-----------------------------------------------------------------------
c budgets
# define tSTATSTART param(3)
# define tSTATFREQ  param(4)
# define readSTAT   param(5)
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
c     implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c budgets
      include 'REFERENCE'
      include 'FLUIDPROP'

      integer ie
c     ie = gllel(eg)

      udiff  = cpfld(ifield,1)
      utrans = cpfld(ifield,2)

c
c budgets
c
c     if(ifield.eq.1) then !momentum
c       utrans=dens0
c       udiff=visc0
c     elseif(ifield.eq.ifld_h) then !enthalpy
c       utrans=dens0*thcap0
c       udiff=thcond0
c     endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ie
c     ie = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
c     implicit none
      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ie
c     ie = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     if (cbc(iside,gllel(eg),ifield).eq.'v01')

      integer ie
      integer delta99

      ie = gllel(eg)

      x = xm1(ix,iy,iz,ie)
      y = ym1(ix,iy,iz,ie)
      z = zm1(ix,iy,iz,ie)

      delta99 = 1 ! 1-> \d_99=0.25, 2 -> \d_99=2.00

      ux   = blasius_ux(x,y,z,delta99)
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ie,delta99

      ie = gllel(eg)

      x = xm1(ix,iy,iz,ie)
      y = ym1(ix,iy,iz,ie)
      z = zm1(ix,iy,iz,ie)

      delta99 = 1 ! 1-> \d_99=0.25, 2 -> \d_99=2.00

      ux   = blasius_ux(x,y,z,delta99)
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
c     implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'AVG'

      integer ifld,nel,n
      character*3 bctyp
      real l2_temp(lx1,ly1,lz1,lelv)

      real Tx(lx1,ly1,lz1,lelt)
      real Ty(lx1,ly1,lz1,lelt)
      real Tz(lx1,ly1,lz1,lelt)
      real Tm(lx1,ly1,lz1,lelt)
      real uf(lx1,ly1,lz1,lelt)
      real yp(lx1,ly1,lz1,lelt)

      ifto  = .false.
      ifxyo = .false.

      ifld  = 1
      nel   = nelfld(ifld)
      n     = lx1*ly1*lz1*nel

      call e2_out

      call standard_incomp_calc(int(readSTAT),.true.)

      bctyp = 'W  '
      call comp_wallShear(Tx,Ty,Tz,Tm,uf,yp,uavg,vavg,wavg,bctyp)
      call sample(Tm,uf,Tx,Ty,Tz,'wsh','Tm ','uf ','Tx ','Ty ','Tz ')
c     call comp_uplus(uavg,vavg,wavg,bctyp,ifld)

c     call lambda2(l2_temp)
c     call copy(t(1,1,1,1,1),l2_temp,n)

c     call comp_tke(.true.)

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
c     implicit none
      include 'SIZE'
      include 'TOTAL'

c budgets
      include 'REFERENCE'  
      include 'FLUIDPROP'  

      common /cdsmag/ ediff(lx1,ly1,lz1,lelv)

      n = nx1*ny1*nz1*nelt 
      call cfill(ediff,param(2),n)  ! initialize viscosity

c budgets
      dens0   = param(1)
      visc0   = param(2)
      thcap0  = 1.
      thcond0 = 1.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
c     implicit none
      include 'SIZE'
      include 'TOTAL'

      integer i,n, iel, ifc, id_face
      real xmin,xmax,ymin,ymax,scaley,scalex
      real glmin,glmax

c---------
      parameter (lbc=10) ! Maximum number of bc types
      character*3 f2tbc(2,lbc)

      nfield = 1 ! 1 == only flow field
      nbc=0
      call add_temp(f2tbc,nbc,1) !
c---------

      n=nx1*ny1*nz1*nelv

c from gmsh2nek
c
c     total quad element number is         8184
c     total hex element number is        41412
c     ******************************************************
c     Boundary info summary
c     BoundaryName     BoundaryID
c     inlet           1
c     outlet           2
c     wall           3
c     sym           4
c     pm           5
c     pp           6
c     ******************************************************

      do iel=1,nelv
        do ifc=1,2*ndim

          id_face = bc(5,ifc,iel,1)

          if     (id_face.eq.1) then           ! inlet
             cbc(ifc,iel,1) = 'v  '
          elseif (id_face.eq.2) then           ! outlet
             cbc(ifc,iel,1) = 'O  '
          elseif (id_face.eq.3) then           ! wall
             cbc(ifc,iel,1) = 'W  '
          elseif (id_face.eq.4) then           ! symmetry
             cbc(ifc,iel,1) = 'SYM'
          elseif (id_face.eq.5) then           ! pm - do nothing
c            cbc(ifc,iel,1) = 'P  '          
          elseif (id_face.eq.6) then           ! pp - do nothing
c            cbc(ifc,iel,1) = 'P  '          
c         elseif (id_face.eq.7) then           ! interpolate (for neknek)
c            cbc(ifc,iel,1) = 'int'
          endif

        enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
c     implicit none
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine e2_out
      include 'SIZE'
      include 'TOTAL'
c
c     prints out uvwp abs max and volume average/rms
 

      n   = nx1*ny1*nz1*nelv
      m   = nx2*ny2*nz2*nelv
      vxm = glamax(vx,n)			! absolute value max
      vym = glamax(vy,n)
      prm = glamax(pr,m)
      vxa = glsc2(vx,   bm1,n) / volvm1		! volume-average
      vya = glsc2(vy,   bm1,n) / volvm1
      pra = glsc2(pr,   bm2,m) / volvm2
      vx2 = glsc3(vx,vx,bm1,n) / volvm1
      vy2 = glsc3(vy,vy,bm1,n) / volvm1
      pr2 = glsc3(pr,pr,bm2,m) / volvm2
      vx2 = vx2 - vxa*vxa
      vy2 = vy2 - vya*vya
      pr2 = pr2 - pra*pra
      if (vx2.gt.0) vx2 = sqrt(vx2)		! volume-rms
      if (vy2.gt.0) vy2 = sqrt(vy2)
      if (pr2.gt.0) pr2 = sqrt(pr2)

      if (if3d) then				! 3D
         vzm = glamax(vz,n)
         vza = glsc2(vz,   bm1,n) / volvm1
         vz2 = glsc3(vz,vz,bm1,n) / volvm1
         vz2 = vz2 - vza*vza
         if (vz2.gt.0) vz2 = sqrt(vz2)

         if (nid.eq.0) write(6,1) istep,time,vxa,vya,vza,pra ! 1-2  3-6
     $                      ,vx2,vy2,vz2,pr2,vxm,vym,vzm,prm ! 7-10 11-13
      else
         if (nid.eq.0) write(6,2) istep,time,vxa,vya,pra     ! 1-2 3-5
     $                          ,vx2,vy2,pr2,vxm,vym,prm     ! 6-8 9-11
      endif
    1 format(i7,1p13e16.7,' e2')
    2 format(i7,1p10e16.7,' e2')

      return
      end
c-----------------------------------------------------------------------
      function blasius_ux(x,y,z,delta99)

      real blasius_ux
      real x,y,z
      integer delta99

      real y_in,y_out,y_buf,ux_in,ux_mid,ux_out,ux,w0,w1

      if(delta99.eq.1) then
        y_in  = 0.095
        y_out = 0.32
        y_buf = 0.02

        ux_in  = (-5.2443*y**2 + 6.7224*y )
        ux_mid = ( 35.401*y**4 + 16.752*y**3 - 32.97*y**2 
     &           + 11.484*y - 0.2193 )
        ux_out = 1.0

      elseif(delta99.eq.2) then
        y_in  = 0.79
        y_out = 2.59
        y_buf = 0.02
  
        ux_in = -0.0817*y**2 + 0.8391*y
        ux_mid = 0.0086*y**4 + 0.0326*y**3 
     &         - 0.5137*y**2 + 1.4335*y - 0.2193
        ux_out = 1.0
  
      else
        y_in  = 0.79
        y_out = 2.59
        y_buf = 0.02
  
        ux_in  = 1.0
        ux_mid = 1.0
        ux_out = 1.0
  
      endif

      if(y .LE. y_in-y_buf) then
         ux = ux_in
      elseif(y .LE. y_in+y_buf) then
         w0 = ( y - (y_in-y_buf) )
     &      / ((y_in+y_buf) - (y_in-y_buf))
         w1 = 1.0 - w0
         ux = w0*ux_in + w1*ux_mid
      elseif(y .LE. y_out-y_buf) then       
         ux = ux_mid
      elseif(y .LE. y_out+y_buf) then
         w0 = ( y - (y_out-y_buf) )
     &      / ((y_out+y_buf) - (y_out-y_buf))
         w1 = 1.0 - w0
         ux = w0*ux_mid + w1*ux_out
      else
         ux = ux_out
      endif

      blasius_ux = ux

      return
      end
c-----------------------------------------------------------------------
      subroutine gmsh_chks
      include 'SIZE'
      include 'TOTAL'

c mass mat
      integer nt1,nt2,ntd
      real b1max,b1min,b1vol
      real b2max,b2min,b2vol
      real bdmax,bdmin,bdvol

c outpost normals, BC
      real tmp1(lx1,ly1,lz1,lelv)
     $    ,tmp2(lx1,ly1,lz1,lelv)
     $    ,tmp3(lx1,ly1,lz1,lelv)
     $    ,tmp4(lx2,ly2,lz2,lelv)
      integer f,e,k
      integer idimt,iface,j1,js1,jf1,jskip1,j2,js2,jf2,jskip2
      real faceid

      nt1 = lx1*ly1*lz1*nelv
      nt2 = lx2*ly2*lz2*nelv
      ntd = lxd*lyd*lzd*nelv

c mass mat
      b1max = glmax(bm1,nt1)
      b1min = glmin(bm1,nt1)
      b1vol = glsum(bm1,nt1)

      b2max = glmax(bm2,nt2)
      b2min = glmin(bm2,nt2)
      b2vol = glsum(bm2,nt2)

c     bdmax = glmax(bmd,ntd)
c     bdmin = glmin(bmd,ntd)
c     bdvol = glsum(bmd,ntd)

      if(nid.eq.0) then
        write(6,*) 'b1max,b1min,b1vol',b1max,b1min,b1vol
        write(6,*) 'b2max,b2min,b2vol',b2max,b2min,b2vol
c       write(6,*) 'bdmax,bdmin,bdvol',bdmax,bdmin,bdvol
      endif

c outpost normals, BC
      call rzero(tmp1,nt1)
      call rzero(tmp2,nt1)
      call rzero(tmp3,nt1)
      call rzero(tmp4,nt2)
 
      call dsset(nx1,ny1,nz1)

      do e=1,nelv
      do f=1,2*ndim
        iface  = eface1(f)   ! surface to volume shifts
        js1    = skpdat(1,iface)
        jf1    = skpdat(2,iface)
        jskip1 = skpdat(3,iface)
        js2    = skpdat(4,iface)
        jf2    = skpdat(5,iface)
        jskip2 = skpdat(6,iface)

        if    (cbc(f,e,1).eq.'v  ')then ! inflow
          faceid=1
        elseif(cbc(f,e,1).eq.'O  ')then ! outflow
          faceid=2
        elseif(cbc(f,e,1).eq.'W  ')then ! wall
          faceid=3
        elseif(cbc(f,e,1).eq.'SYM')then ! symmetric
          faceid=4
        elseif(cbc(f,e,1).eq.'P  ')then ! periodic
          faceid=5
        elseif(cbc(f,e,1).eq.'E  ')then ! interior boundary
          faceid=6
        else 
          faceid=0
        endif

        k = 0
        do j2=js2,jf2,jskip2
        do j1=js1,jf1,jskip1
          k = k + 1
 
          tmp1(j1,j2,1,e) = unx(k,1,f,e)      ! face normal X-comp
          tmp2(j1,j2,1,e) = uny(k,1,f,e)      !             Y
          tmp3(j1,j2,1,e) = unz(k,1,f,e)      !             Z
          tmp4(j1,j2,1,e) = faceid
 
        enddo
        enddo

      enddo
      enddo

      ifxyo = .true.
      ifto  = .false.
      call outpost(tmp1,tmp2,tmp3,tmp4,t,'bbc')

      return
      end
c-----------------------------------------------------------------------
      subroutine comp_tke(ifsample)
      INCLUDE 'SIZE'  
      INCLUDE 'TOTAL' 
      INCLUDE 'AVG'
      INCLUDE 'AVGINCOMP'
      INCLUDE 'REFERENCE'
      INCLUDE 'BUDGETSINCOMP'

      logical ifsample

      integer ntot

      real tkmax,tk_L2,immax,im_L2

      real cnk(lx1,ly1,lz1,lelv) ! convection
     $    ,prk(lx1,ly1,lz1,lelv) ! proudction
     $    ,ptk(lx1,ly1,lz1,lelv) ! pressure transport
     $    ,pdk(lx1,ly1,lz1,lelv) ! pressure diffusion
     $    ,psk(lx1,ly1,lz1,lelv) ! pressure strain -- should be zero!
     $    ,tdk(lx1,ly1,lz1,lelv) ! turbulent diffusion
     $    ,epk(lx1,ly1,lz1,lelv) ! viscous dissipation
     $    ,vdk(lx1,ly1,lz1,lelv) ! viscous diffusion
     $    ,tkk(lx1,ly1,lz1,lelv) ! turublent kinetic energy
     $    ,imk(lx1,ly1,lz1,lelv) ! imbalance in TKE
c
      if(nid.eq.0) write(6,*)'in comp_tke(...)'
c
      ntot=lx1*ly1*lz1*nelv
c 
      call rzero(cnk,ntot)
      call rzero(prk,ntot)
      call rzero(ptk,ntot)
      call rzero(pdk,ntot)
      call rzero(psk,ntot)
      call rzero(tdk,ntot)
      call rzero(epk,ntot)
      call rzero(vdk,ntot)
      call rzero(tkk,ntot)
      call rzero(imk,ntot)
c
      do i=1,ntot
         cnk(i,1,1,1)=conv_uu(i,1,1,1)+conv_vv(i,1,1,1)+conv_ww(i,1,1,1)
         prk(i,1,1,1)= prd_uu(i,1,1,1)+ prd_vv(i,1,1,1)+ prd_ww(i,1,1,1)
         ptk(i,1,1,1)= ptr_uu(i,1,1,1)+ ptr_vv(i,1,1,1)+ ptr_ww(i,1,1,1)
         pdk(i,1,1,1)= pdf_uu(i,1,1,1)+ pdf_vv(i,1,1,1)+ pdf_ww(i,1,1,1)
         psk(i,1,1,1)= pst_uu(i,1,1,1)+ pst_vv(i,1,1,1)+ pst_ww(i,1,1,1)
         tdk(i,1,1,1)= tdf_uu(i,1,1,1)+ tdf_vv(i,1,1,1)+ tdf_ww(i,1,1,1)
         epk(i,1,1,1)= eps_uu(i,1,1,1)+ eps_vv(i,1,1,1)+ eps_ww(i,1,1,1)
         vdk(i,1,1,1)= vdf_uu(i,1,1,1)+ vdf_vv(i,1,1,1)+ vdf_ww(i,1,1,1)
c
         cnk(i,1,1,1) = cnk(i,1,1,1) * 0.5
         prk(i,1,1,1) = prk(i,1,1,1) * 0.5
         ptk(i,1,1,1) = ptk(i,1,1,1) * 0.5
         pdk(i,1,1,1) = pdk(i,1,1,1) * 0.5
         psk(i,1,1,1) = psk(i,1,1,1) * 0.5
         tdk(i,1,1,1) = tdk(i,1,1,1) * 0.5
         epk(i,1,1,1) = epk(i,1,1,1) * 0.5
         vdk(i,1,1,1) = vdk(i,1,1,1) * 0.5
c
         tkk(i,1,1,1) = 0.5*
     $                (urms(i,1,1,1)-uavg(i,1,1,1)*uavg(i,1,1,1)+
     $                 vrms(i,1,1,1)-vavg(i,1,1,1)*vavg(i,1,1,1)+
     $                 wrms(i,1,1,1)-wavg(i,1,1,1)*wavg(i,1,1,1))
c
         imk(i,1,1,1) = - cnk(i,1,1,1) + prk(i,1,1,1) + ptk(i,1,1,1)
     $                  + tdk(i,1,1,1) + epk(i,1,1,1) + vdk(i,1,1,1)
      enddo

      tkmax=glmax(tkk,ntot)
      call comp_L2(tk_L2,tkk)

      immax=glmax(imk,ntot)
      call comp_L2(im_L2,imk)

      if(nid.eq.0) then
        write(6,258)'atime:',atime
        write(6,258)'tkmax:',tkmax
        write(6,258)'tk_L2:',tk_L2
        write(6,258)'immax:',immax
        write(6,258)'im_L2:',im_L2
      endif

 258  format(a6,1es15.8)

      call probePoint(uavg,vavg,wavg,urms,vrms,wrms)

      if(ifsample) then
      call sample(cnk,prk,ptk,pdk,psk,'tk1',
     $           'conv','prod','pres_tr','pres_df','garbage')
      call sample(psk,tdk,epk,vdk,prk,'tk2',
     $           'pres_st','turb_df','diss','visc_df','garbage')
      call sample(tkk,imk,psk,prk,pdk,'tk3',
     $           'tkk','imk','garbage','garbage','garbage')
      endif

      return
      end
c-----------------------------------------------------------------------
