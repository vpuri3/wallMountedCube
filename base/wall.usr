C-----------------------------------------------------------------------
c  in usrchk()
c
c     character*3 bctyp
c 
c     real Tx(lx1,ly1,lz1,lelv) ! shear stress X-comp
c     real Ty(lx1,ly1,lz1,lelv) !              Y   
c     real Tz(lx1,ly1,lz1,lelv) !              Z
c     real Tm(lx1,ly1,lz1,lelv) ! shear stress mag
c     real uf(lx1,ly1,lz1,lelv) ! friction velocity
c     real yp(lx1,ly1,lz1,lelv) ! y-plus
c
c     bctyp = 'W  '
c     call comp_wallShear(Tx,Ty,Tz,Tm,uf,yp,vx,vy,vz,bctyp)
c
C-----------------------------------------------------------------------
      subroutine comp_wallShear(Tx,Ty,Tz,Tm,uf,yp,ux,uy,uz,bctyp)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer lxyz,nxzf,lxyzv
      parameter(lxyz  = lx1*ly1*lz1)
      parameter(nxzf  = 2*ldim)
      parameter(lxyzv = lelv*lxyz)

      real Tx(lx1,ly1,lz1,lelv) ! Shear Stress
     $    ,Ty(lx1,ly1,lz1,lelv)
     $    ,Tz(lx1,ly1,lz1,lelv)
     $    ,Tm(lx1,ly1,lz1,lelv)
     $    ,uf(lx1,ly1,lz1,lelv) ! friction velocity
     $    ,yp(lx1,ly1,lz1,lelv) ! y-plus
     $    ,ux(lx1,ly1,lz1,lelv) ! Velocity Field
     $    ,uy(lx1,ly1,lz1,lelv)
     $    ,uz(lx1,ly1,lz1,lelv)
      character*3 bctyp


      real ur,us,ut,vr,vs,vt,wr,ws,wt

      common /ctmp1/ ur(lxyz),us(lxyz),ut(lxyz) ! used to compute sij
     $             , vr(lxyz),vs(lxyz),vt(lxyz)
     $             , wr(lxyz),ws(lxyz),wt(lxyz)

      real sij(lx1,ly1,lz1,nxzf,lelv)  ! strain rate tensor
      real s11,s12,s13
     $    ,s21,s22,s23
     $    ,s31,s32,s33

      real vsc,dsty                    ! vsc == dynamic viscosity
      real n1,n2,n3                    ! normals
      real Tmg,a,xdrg,ydrg,zdrg,mdrg,Tmavg,ufavg

      integer e,f,k,ntot,ifld
      integer idimt,iface,j1,js1,jf1,jskip1,j2,js2,jf2,jskip2
      logical iifxyo,iifvo,iifpo,iifto ! for outposting

      if(nid.eq.0) write(6,*) 'in comp_wallShear(...)'
c
      ntot = lx1*ly1*lz1*nelv
c
      call rzero(Tx,ntot)
      call rzero(Ty,ntot)
      call rzero(Tz,ntot)
      call rzero(Tm,ntot)
      call rzero(uf,ntot)
      call rzero(yp,ntot)
c
      call rzero(sij,ntot*nxzf)

      a     = 0.                ! area of face
      xdrg  = 0.                ! drag on face X-comp
      ydrg  = 0.                !              Y 
      zdrg  = 0.                !              Z
      mdrg  = 0.                !              Mag
c
      idimt = 1
      ifld  = 1

      ! strain rate tensor
      call comp_sij(sij,nxzf,ux,uy,uz,ur,us,ut,vr,vs,vt,wr,ws,wt)

      ! initialize viscocity
      if (istep.eq.0) call cfill(vdiff ,param(2),ntot)
      if (istep.eq.0) call cfill(vtrans,param(1),ntot)

      ! get face info (initialize skpdat array)
      call dsset(nx1,ny1,nz1)

      do e=1,nelv
      do f=1,nxzf
        if (cbc(f,e,ifld).eq.bctyp) then
          iface  = eface1(f)   ! surface to volume shifts
          js1    = skpdat(1,iface)
          jf1    = skpdat(2,iface)
          jskip1 = skpdat(3,iface)
          js2    = skpdat(4,iface)
          jf2    = skpdat(5,iface)
          jskip2 = skpdat(6,iface)

          k = 0
          do j2=js2,jf2,jskip2
          do j1=js1,jf1,jskip1
            k = k + 1
c
            n1 = unx(k,1,f,e)      ! face normal X-comp
            n2 = uny(k,1,f,e)      !             Y
            n3 = unz(k,1,f,e)      !             Z
c
            vsc   = vdiff (j1,j2,1,e,idimt)
            dsty  = vtrans(j1,j2,1,e,idimt)
c
            s11 = sij(j1,j2,1,1,e) ! Strain rate tensor
            s21 = sij(j1,j2,1,4,e)
            s31 = sij(j1,j2,1,6,e)
c
            s12 = sij(j1,j2,1,4,e)
            s22 = sij(j1,j2,1,2,e)
            s32 = sij(j1,j2,1,5,e)
c
            s13 = sij(j1,j2,1,6,e)
            s23 = sij(j1,j2,1,5,e)
            s33 = sij(j1,j2,1,3,e)
c
            Tx(j1,j2,1,e) = -(s11*n1 + s12*n2 + s13*n3)*vsc
            Ty(j1,j2,1,e) = -(s21*n1 + s22*n2 + s23*n3)*vsc
            Tz(j1,j2,1,e) = -(s31*n1 + s32*n2 + s33*n3)*vsc
c
            Tmg =       Tx(j1,j2,1,e)*Tx(j1,j2,1,e)
            Tmg = Tmg + Ty(j1,j2,1,e)*Ty(j1,j2,1,e)
            Tmg = Tmg + Tz(j1,j2,1,e)*Tz(j1,j2,1,e)
            Tmg = sqrt(Tmg)
c
            Tm(j1,j2,1,e) = Tmg               ! shear stress mag
            uf(j1,j2,1,e) = sqrt(Tmg/dsty)    ! friction velocity
            yp(j1,j2,1,e) = vsc/uf(j1,j2,1,e) ! y-plus
c
            a    = a    + area(k,1,f,e)               ! area
            xdrg = xdrg + Tx(j1,j2,1,e)*area(k,1,f,e) ! viscous drag
            ydrg = ydrg + Ty(j1,j2,1,e)*area(k,1,f,e)
            zdrg = zdrg + Tz(j1,j2,1,e)*area(k,1,f,e)
c
c           xdrg = xdrg - n1*pr(j1,j2,1,e)*area(k,1,f,e) ! pressure contribution
c           ydrg = ydrg - n2*pr(j1,j2,1,e)*area(k,1,f,e) ! to drag
c           zdrg = zdrg - n3*pr(j1,j2,1,e)*area(k,1,f,e)

          enddo
          enddo

        endif
      enddo
      enddo
 
      call gop(a   ,Tmg,'+  ',1) ! summing over all processes
      call gop(xdrg,Tmg,'+  ',1)
      call gop(ydrg,Tmg,'+  ',1)
      call gop(zdrg,Tmg,'+  ',1)
 
      mdrg = xdrg*xdrg + ydrg*ydrg + zdrg*zdrg
      mdrg = sqrt(mdrg)
      Tmavg= mdrg / (a*dsty)
      ufavg= sqrt(Tmavg/dsty)
 
      if(nid.eq.0) then
        write(6,258)'area:' ,a
c       write(6,258)'xdrag:',xdrg
c       write(6,258)'ydrag:',ydrg
c       write(6,258)'zdrag:',zdrg
        write(6,258)'Mdrag:',mdrg
        write(6,258)'Tmavg:',Tmavg
        write(6,258)'Ufavg:',ufavg
      endif
 
 258  format(a6,1es15.8)

      ! Outpost

      iifxyo = ifxyo
      iifvo  = ifvo
      iifpo  = ifpo
      iifto  = ifto
 
      ifxyo = .true.
      ifvo  = .true.
      ifpo  = .false.
      ifto  = .true.
 
      call outpost(Tm,uf,yp,pr,Tx,'wsh')
 
      ifxyo = iifxyo
      ifvo  = iifvo
      ifpo  = iifpo
      ifto  = iifto
 
      return
      end
c------------------------------------------------------------------------
c Face Normal
c------------------------------------------------------------------------
c  in usrchk()
c
c     integer ifld
c     character*3 bctyp
c 
c     real Nx(lx1,ly1,lz1,lelv) ! face normal X-comp
c     real Ny(lx1,ly1,lz1,lelv) !             Y   
c     real Nz(lx1,ly1,lz1,lelv) !             Z
c
c     ifld  = 1
c     bctyp = 'W  '
c     call get_faceNormal(Nx,Ny,Nz,bctyp,ifld)
c
C-----------------------------------------------------------------------
      subroutine get_faceNormal(Nx,Ny,Nz,bctyp,ifld)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real Nx(lx1,ly1,lz1,lelv) ! face normals
     $    ,Ny(lx1,ly1,lz1,lelv)
     $    ,Nz(lx1,ly1,lz1,lelv)
      integer ifld
      character*3 bctyp

      integer e,f,k,ntot
      integer iface,j1,js1,jf1,jskip1,j2,js2,jf2,jskip2

      ntot = lx1*ly1*lz1*nelv
c
      call rzero(Nx,ntot)
      call rzero(Ny,ntot)
      call rzero(Nz,ntot)
c
      ! get face info (initialize skpdat array)
      call dsset(nx1,ny1,nz1)

      do e=1,nelv
      do f=1,2*ldim
        if (cbc(f,e,ifld).eq.bctyp) then
          iface  = eface1(f)   ! surface to volume shifts
          js1    = skpdat(1,iface)
          jf1    = skpdat(2,iface)
          jskip1 = skpdat(3,iface)
          js2    = skpdat(4,iface)
          jf2    = skpdat(5,iface)
          jskip2 = skpdat(6,iface)

          k = 0
          do j2=js2,jf2,jskip2
          do j1=js1,jf1,jskip1
            k = k + 1

            Nx(j1,j2,1,e) = unx(k,1,f,e)      ! face normal X-comp
            Ny(j1,j2,1,e) = uny(k,1,f,e)      !             Y
            Nz(j1,j2,1,e) = unz(k,1,f,e)      !             Z

          enddo
          enddo

        endif
      enddo
      enddo

      return
      end
c------------------------------------------------------------------------
      subroutine write2file(sclr1,sclr2,sclr3,sclr4,name1,name2,name3
     $                     ,name4,filename,step0,dstep,numsteps)
      include 'SIZE'
      include 'TOTAL'

      real sclr1,sclr2,sclr3,sclr4
      integer step0,dstep,numsteps
      character(3) name1,name2,name3,name4,filename
c
      integer step1
      logical ifnwrite

      integer i,j
      save    i
      data    i  /0/

      real val(6,lhis)
      save val

      character(7) filenametot
      logical there

      if(istep.lt.step0) goto 998

      step1 = step0 + dstep * (numsteps - 1)
      if(istep.gt.step1) goto 998

      ifnwrite =  mod(istep-step0,dstep).ne.0
      if(ifnwrite) goto 998

      if(numsteps.gt.lhis) then
        if(nid.eq.0) write(6,*) 'ABORT: in write2file, numsteps > lhis'
        call exit
      endif

      if(i.eq.0) then
        call rzero(val,6*numsteps)
      endif


      filename = trim(filename)
      call blank(filenametot,7)
      filenametot = filename//".dat"
      if(nid.eq.0) write(6,*) 'writing scalar to file ',filenametot

      if(i.eq.numsteps) i = 0
      i = i + 1
      val(1,i) = istep
      val(2,i) = time
      val(3,i) = sclr1
      val(4,i) = sclr2
      val(5,i) = sclr3
      val(6,i) = sclr4

      call nekgsync()         

      if((nid.eq.0).and.(istep.eq.step1)) then

        inquire(file=filenametot,exist=there)
        if(there) then
          write(6,*) 'Rewriting file: ',filenametot
          open(unit=987,FILE=filenametot,status='old')
          close (987,status='delete')
        else
          write(6,*) 'Writing file: ',filenametot
        endif

        open(unit=987,FILE=trim(filenametot),status='new')
        write(987,'(1p,6A15)')'Step','Time',name1,name2,name3,name4

        do j=1,numsteps
          write(987,'(1p,6E15.7)') val(1,j),val(2,j),val(3,j),val(4,j)
     $                            ,val(5,j),val(6,j)
        enddo

        close(unit=987)

      endif

      call nekgsync()         

 998  continue

      return
      end
c-----------------------------------------------------------------------
      subroutine avg_3d(ua,u)
      include 'SIZE'
      include 'TOTAL'
      real vol
      integer nt

      nt  = lx1*ly1*lz1*nelv
      vol = glsum(bm1,nt)
      ua  = glsc2(bm1,u,nt)/vol

      return
      end
c-----------------------------------------------------------------------
      subroutine comp_L2(uL2,u)
      include 'SIZE'
      include 'TOTAL'

      real uL2, u(1)

      real u2(lx1*ly1*lz1*lelv)
      integer nt

      nt = lx1*ly1*lz1*nelv;

      do i=1,nt
        u2(i) = u(i) * u(i)
      enddo

      call avg_3d(uL2,u2)
      uL2 = sqrt(uL2)

      return
      end
c-----------------------------------------------------------------------
      subroutine comp_div(dd,ux,uy,uz)
      include 'SIZE'
      include 'TOTAL'

      real dd
      real ux(lx1,ly1,lz1,lelv)
     $    ,uy(lx1,ly1,lz1,lelv)
     $    ,uz(lx1,ly1,lz1,lelv)
c
      real div (lx1,ly1,lz1,lelv)
     $    ,dudx(lx1,ly1,lz1,lelv)
     $    ,dudy(lx1,ly1,lz1,lelv)
     $    ,dudz(lx1,ly1,lz1,lelv)
     $    ,dvdx(lx1,ly1,lz1,lelv)
     $    ,dvdy(lx1,ly1,lz1,lelv)
     $    ,dvdz(lx1,ly1,lz1,lelv)
     $    ,dwdx(lx1,ly1,lz1,lelv)
     $    ,dwdy(lx1,ly1,lz1,lelv)
     $    ,dwdz(lx1,ly1,lz1,lelv)

      integer ntot

      ntot=lx1*ly1*lz1*nelv
      call rzero(div,ntot)

      call gradm1(dudx,dudy,dudz,ux)
      call gradm1(dvdx,dvdy,dvdz,uy)
      call gradm1(dwdx,dwdy,dwdz,uz)

      do i=1,ntot
        div(i,1,1,1) = dudx(i,1,1,1) + dvdy(i,1,1,1) + dwdz(i,1,1,1)
        div(i,1,1,1) = div(i,1,1,1)*div(i,1,1,1)
      enddo

      call avg_3d(dd,div)
      dd = sqrt(dd)

      return
      end
c-----------------------------------------------------------------------
